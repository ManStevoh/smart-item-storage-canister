type SmartStorageItem = record {
  id: nat64;
  name: text;
  description: text;
  location: text;
  created_at: nat64;
  updated_at: opt nat64;
  is_available: bool;
};

type SmartStorageItemPayload = record {
  name: text;
  description: text;
  location: text;
  is_available: bool;
};

type Error = variant { NotFound: record { msg: text } };

type ChangeRecord = record {
  timestamp: nat64;
  change_type: text;
};

type ItemStatistics = record {
  total_items: nat;
  average_availability_rate: float64;
};

type Query = variant {
  GetItem: nat64;
  // Add more query types as needed
};

type QueryResult = variant {
  Item: SmartStorageItem;
  Error: Error;
};

service : {
  get_smart_storage_item: (nat64) -> (variant { Ok: SmartStorageItem; Err: Error }) query;
  get_all_smart_storage_items: () -> (vec SmartStorageItem);
  get_available_smart_storage_items: () -> (vec SmartStorageItem);
  search_smart_storage_items: (text) -> (vec SmartStorageItem);
  add_smart_storage_item: (SmartStorageItemPayload) -> (opt SmartStorageItem);
  update_smart_storage_item: (nat64, SmartStorageItemPayload) -> (variant { Ok: SmartStorageItem; Err: Error });
  is_item_available: (nat64) -> (variant { Ok: bool; Err: Error }) query;
  mark_item_as_available: (nat64) -> (variant { Ok: SmartStorageItem; Err: Error });
  mark_item_as_unavailable: (nat64) -> (variant { Ok: SmartStorageItem; Err: Error });
  delete_smart_storage_item: (nat64) -> (variant { Ok: SmartStorageItem; Err: Error });
  sort_items_by_name: () -> (vec SmartStorageItem);
  get_item_history: (nat64) -> (vec ChangeRecord);
  batch_query: (vec Query) -> (vec QueryResult);
  get_item_statistics: () -> (ItemStatistics);
};
